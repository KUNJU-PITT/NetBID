% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pipeline_functions.R
\name{generate.masterTable}
\alias{generate.masterTable}
\title{Generate final master table for drivers.}
\usage{
generate.masterTable(use_comp = NULL, DE = NULL, DA = NULL,
  network = NULL, main_id_type = NULL, transfer_tab = NULL,
  tf_sigs = tf_sigs, z_col = "Z-statistics", display_col = c("logFC",
  "P.Value"), column_order_stratey = "type")
}
\arguments{
\item{use_comp}{a vector of characters, the comparison name used to display in the master table.}

\item{DE}{a list of DE results, the list name must contain the items in \code{use_comp}.}

\item{DA}{a list of DA results, the list name must contain the items in \code{use_comp}.}

\item{network}{a list for the target gene information for the drivers.
Each object in the list must be a data.frame and should contain one column ("target") to save the target genes.
Strongly suggest to follow the NetBID2 pipeline, and the \code{TF_network} could be automatically generated by \code{get_net2target_list} by
running \code{get.SJAracne.network}.}

\item{main_id_type}{character, the main gene id type. The attribute name from the biomaRt package,
such as 'ensembl_gene_id', 'ensembl_gene_id_version', 'ensembl_transcript_id', 'ensembl_transcript_id_version', 'refseq_mrna'. Full list could be obtained by
\code{listAttributes(mart)$name}, where \code{mart} is the output of \code{useMart} function.}

\item{transfer_tab}{data.frame, the transfer table for ID conversion, could be obtained by \code{get_IDtransfer}.
If NULL, will automatically get the transfer table within the function if the \code{main_id_type} is not in the column names of `tf_sigs`. Default is NULL.}

\item{tf_sigs}{list, which contain the detailed information for the TF and SIGs, this can be obtained by running \code{db.preload}.}

\item{z_col}{character, column name in \code{DE}, \code{DA} that contains the Z statistics. Default is 'Z-statistics'.}

\item{display_col}{character,column name in \code{DE}, \code{DA} to be kept in the master table. Default is c('logFC','P.Value').}

\item{column_order_stratey}{character, choose from 'type' and 'comp'. Default is 'type'.}
}
\value{
a data.frame that contains the information for all tested drivers.
The column "originalID" and "originalID_label" contain the ID same with the original dataset.
}
\description{
\code{generate.masterTable} is a function to automatically generate master tables
by input the merged TF/SIG results.
}
\details{
This function is designed for automatically generate master table, with :
DE (differentiated expression), DA(differentiated activity for drivers),network (a list for the target gene information for the drivers),
and necessary additional information (main_id_type, tf_sigs, z_col and display_col).
If results from TF/SIG do not have merged before, please use \code{generate.masterTable.TF_SIG}.
}
\examples{
analysis.par <- list()
analysis.par$out.dir.DATA <- system.file('demo1','driver/DATA/',package = "NetBID2")
NetBID.loadRData(analysis.par=analysis.par,step='ms-tab')
#analysis.par$final_ms_tab ## this is master table generated before
ac_mat <- cal.Activity(target_list=analysis.par$merge.network$target_list,
                       cal_mat=exprs(analysis.par$cal.eset),es.method='weightedmean')
analysis.par$ac.merge.eset  <- generate.eset(exp_mat=ac_mat,
                                             phenotype_info=pData(analysis.par$cal.eset))
phe_info <- pData(analysis.par$cal.eset)
all_subgroup <- unique(phe_info$subgroup) ##
for(each_subtype in all_subgroup){
 comp_name <- sprintf('\%s.Vs.others',each_subtype) ## each comparison must give a name !!!
 G0  <- rownames(phe_info)[which(phe_info$`subgroup`!=each_subtype)] # get sample list for G0
 G1  <- rownames(phe_info)[which(phe_info$`subgroup`==each_subtype)] # get sample list for G1
 DE_gene_limma <- getDE.limma.2G(eset=analysis.par$cal.eset,G1=G1,G0=G0,
                                 G1_name=each_subtype,G0_name='other')
 analysis.par$DE[[comp_name]] <- DE_gene_limma
 DA_driver_limma <- getDE.limma.2G(eset=analysis.par$ac.merge.eset,G1=G1,G0=G0,
                                   G1_name=each_subtype,G0_name='other')
 analysis.par$DA[[comp_name]] <- DA_driver_limma
}
all_comp <- names(analysis.par$DE) ## get all comparison name for output
db.preload(use_level='gene',use_spe='human',update=FALSE);
test_ms_tab <- generate.masterTable(use_comp=all_comp,
                                           DE=analysis.par$DE,
                                           DA=analysis.par$DA,
                                           network=analysis.par$merge.network$target_list,
                                           tf_sigs=tf_sigs,
                                           z_col='Z-statistics',
                                           display_col=c('logFC','P.Value'),
                                           main_id_type='external_gene_name')
}
