% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pipeline_functions.R
\name{update_SJAracne.network}
\alias{update_SJAracne.network}
\title{Update the network information in the structured network list dataset}
\usage{
update_SJAracne.network(network_list = NULL,
  all_possible_drivers = NULL, all_possible_targets = NULL,
  force_all_drivers = TRUE, force_all_targets = TRUE, min_MI = 0,
  max_p.value = 1, min_spearman_value = 0, min_pearson_value = 0,
  spearman_sign_use = c(1, -1), pearson_sign_use = c(1, -1),
  directed = TRUE, weighted = TRUE)
}
\arguments{
\item{network_list}{list,the network list dataset generated by \code{get.SJAracne.network},
contains \code{network_dat}, \code{target_list} and \code{igraph_obj}.}

\item{all_possible_drivers}{a vector of characters,all possible driver list used to filter the network file.
If NULL, will set to the possible drivers from \code{network_list}. Default is NULL.}

\item{all_possible_targets}{a vector of characters,all possible target list used to filter the network file.
If NULL, will set to the possible targets \code{network_list}. Default is NULL.}

\item{force_all_drivers}{logical, whether or not to include all genes in the \code{all_possible_drivers} in the final network.
For \code{network_dat} and \code{target_list}, if \code{force_all_drivers} is set to TRUE, genes in \code{all_possible_drivers}
will not be filtered by the following statistical thresholds.
For \code{igraph_obj}, if \code{force_all_drivers} is set to TRUE, all genes in \code{all_possible_drivers},
even not exist in the original network file will be include in the vertice of the igraph object.
Default is TRUE.}

\item{force_all_targets}{logical, whether or not to include all genes in the \code{all_possible_targets} in the final network.
For \code{network_dat} and \code{target_list}, if \code{all_possible_targets} is set to TRUE, genes in \code{all_possible_targets}
will not be filtered by the following statistical thresholds.
For \code{igraph_obj}, if \code{force_all_targets} is set to TRUE, all genes in \code{all_possible_targets},
even not exist in the original network file will be include in the vertice of the igraph object.
Default is TRUE.}

\item{min_MI}{numeric, minimum threshold for MI. Default is 0.}

\item{max_p.value}{numeric, maximum threshold for p.value. Default is 1.}

\item{min_spearman_value}{numeric, minimum threshold for spearman absolute value. Default is 0.}

\item{min_pearson_value}{numeric, minimum threshold for pearson absolute value. Default is 0.}

\item{spearman_sign_use}{a vector of numeric value, 1 indicates positve values in spearman will be used. -1 indicates negative values will be used.
If only want to include positive values, set \code{spearman_sign_use} to 1.
Default is c(1,-1).}

\item{pearson_sign_use}{a vector of numeric value, 1 indicates positve values in pearson will be used. -1 indicates negative values will be used.
If only want to include positive values, set \code{pearson_sign_use} to 1.
Default is c(1,-1).}

\item{directed}{logical, whether the network in igraph is directed or not. Default is TRUE.}

\item{weighted}{logical, whether to add the edge weight in the igraph object. Default is TRUE.}
}
\value{
This function will return a list containing three items, \code{network_dat}, \code{target_list} and \code{igraph_obj}.
}
\description{
\code{update_SJAracne.network} is a function to update the network information by input threshold for statistics or input gene list for use.
}
\details{
This function aims to update the network list dataset generated by \code{get.SJAracne.network}
and return the list dataset passed the filtration with the same data structure.
}
\examples{
if(exists('analysis.par')==TRUE) rm(analysis.par)
network.dir <- sprintf('\%s/demo1/network/',system.file(package = "NetBID2")) # use demo
network.project.name <- 'project_2019-02-14' # demo project name
project_main_dir <- 'test/'
project_name <- 'test_driver'
analysis.par  <- NetBID.analysis.dir.create(project_main_dir=project_main_dir,
                                            prject_name=project_name,
                                            network_dir=network.dir,
                                            network_project_name=network.project.name)
analysis.par$tf.network  <- get.SJAracne.network(network_file=analysis.par$tf.network.file)
analysis.par$sig.network <- get.SJAracne.network(network_file=analysis.par$sig.network.file)
all_possible_drivers <- c(names(analysis.par$tf.network$target_list)[1:1000],
                           'addition_driver_1','addition_driver_2')
tf.network.update <- update_SJAracne.network(network_list=analysis.par$tf.network,
                                             all_possible_drivers=all_possible_drivers,
                                             force_all_drivers=TRUE,
                                             force_all_targets=FALSE,
                                             pearson_sign_use=1)
print(intersect(c('addition_driver_1','addition_driver_2'),
      names(V(tf.network.update$igraph_obj)))) ## check
\dontrun{
}
}
