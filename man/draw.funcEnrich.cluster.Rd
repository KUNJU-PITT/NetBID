% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pipeline_functions.R
\name{draw.funcEnrich.cluster}
\alias{draw.funcEnrich.cluster}
\title{Cluster plot for the result of gene set enrichment analysis.}
\usage{
draw.funcEnrich.cluster(funcEnrich_res = NULL, top_number = 30,
  Pv_col = "Ori_P", name_col = "#Name",
  item_col = "Intersected_items", Pv_thre = 0.1, gs_cex = 0.7,
  gene_cex = 0.8, pv_cex = 0.7, main = "", h = 0.95,
  cluster_gs = TRUE, cluster_gene = TRUE, pdf_file = NULL,
  use_genes = NULL, return_mat = FALSE)
}
\arguments{
\item{funcEnrich_res}{data.frame, containing the result for the function enrichment analysis. Prefer the format generated by using \code{funcEnrich.Fisher}.
If not, users could prepare the required columns and indicate the column names in the following parameters.}

\item{top_number}{numeric, number for the top enriched gene sets to be displayed on the plot. Default is 30.}

\item{Pv_col}{character, the name of the column in \code{funcEnrich_res}, which contains the P-value. Default is 'Ori_P'.}

\item{name_col}{character, the name of the column in \code{funcEnrich_res}, which contains the gene set name. Default is '#Name'.}

\item{item_col}{character, the name of the column in \code{funcEnrich_res}, which contains the detailed intersected gene list, collapsed by ';'.
Default is 'Intersected_items'.}

\item{Pv_thre}{numeric, cutoff value for the p-values. Genes or drivers with lower p-values are remained. Default is 0.1.}

\item{gs_cex}{numeric, \code{cex} for the gene sets displayed on the plot. Default is 0.7.}

\item{gene_cex}{numeric, \code{cex} for the genes displayed on the plot. Default is 0.8.}

\item{pv_cex}{numeric, \code{cex} for the P-value displayed on the plot. Default is 0.7.}

\item{main}{character, \code{main} for the title on the plot.}

\item{h}{numeric, cutoff for the cluster. This parameter will be used in the \code{cutree} function. Default is 0.95}

\item{cluster_gs}{logical, whether or not to cluster gene sets. Default is TRUE.}

\item{cluster_gene}{logical, whether or not to cluster genes. Default is TRUE.}

\item{pdf_file}{character, file path for the pdf file to save the figure into pdf format.If NULL, will not generate pdf file. Default is NULL.}

\item{use_genes}{a vector of characters, gene list used for display in plot,
if NULL will display all genes in the top enriched gene sets.Default is NULL.}

\item{return_mat}{logical, whether or not to return the matrix used for display. Default is FALSE.}
}
\value{
if return_mat==FALSE, will return logical value indicating whether the plot has been successfully generated,
otherwise will return the matrix used for cluster.
}
\description{
\code{draw.funcEnrich.cluster} will draw the cluster for the result of gene set enrichment analysis.
}
\details{
This is a function to draw the cluster (genes and gene sets) for the result of gene set enrichment analysis.
The cluster is based on the binary matrix representing the gene's existence in the enriched gene sets.
Detailed matrix for the cluster, enriched P-value will be displayed on the plot.
}
\examples{
analysis.par <- list()
analysis.par$out.dir.DATA <- system.file('demo1','driver/DATA/',package = "NetBID2")
NetBID.loadRData(analysis.par=analysis.par,step='ms-tab')
ms_tab <- analysis.par$final_ms_tab
sig_driver <- draw.volcanoPlot(dat=ms_tab,label_col='gene_label',
                               logFC_col='logFC.G4.Vs.others_DA',
                               Pv_col='P.Value.G4.Vs.others_DA',
                               logFC_thre=0.4,
                               Pv_thre=1e-7,
                               main='Volcano Plot for G4.Vs.others_DA',
                               show_label=FALSE,
                               label_type = 'origin',
                               label_cex = 0.5)
gs.preload(use_spe='Homo sapiens',update=FALSE)
res1 <- funcEnrich.Fisher(input_list=ms_tab[rownames(sig_driver),'geneSymbol'],
                          bg_list=ms_tab[,'geneSymbol'],
                          use_gs=c('H','C5'),Pv_thre=0.1,Pv_adj = 'none')
draw.funcEnrich.cluster(funcEnrich_res=res1,top_number=30,gs_cex = 0.5,
                       gene_cex=0.9,pv_cex=0.8)
draw.funcEnrich.cluster(funcEnrich_res=res1,top_number=10,gs_cex = 0.6,
                       gene_cex=1,pv_cex=1,
                       cluster_gs=TRUE,cluster_gene = TRUE)
draw.funcEnrich.cluster(funcEnrich_res=res1,top_number=15,gs_cex = 0.8,
                       gene_cex=0.9,pv_cex=0.8,
                       cluster_gs=TRUE,cluster_gene = FALSE)
draw.funcEnrich.cluster(funcEnrich_res=res1,top_number=20,gs_cex = 0.8,
                        gene_cex=0.9,pv_cex=0.8,
                        cluster_gs=FALSE,cluster_gene = TRUE)
draw.funcEnrich.cluster(funcEnrich_res=res1,top_number=20,gs_cex = 1,
                        gene_cex=1,pv_cex=0.8,
                        cluster_gs=FALSE,cluster_gene = FALSE)
\dontrun{
analysis.par <- list()
analysis.par$out.dir.DATA <- system.file('demo1','driver/DATA/',package = "NetBID2")
NetBID.loadRData(analysis.par=analysis.par,step='ms-tab')
ms_tab <- analysis.par$final_ms_tab
sig_driver <- draw.volcanoPlot(dat=ms_tab,label_col='gene_label',
                               logFC_col='logFC.G4.Vs.others_DA',
                               Pv_col='P.Value.G4.Vs.others_DA',
                               logFC_thre=0.4,
                               Pv_thre=1e-7,
                               main='Volcano Plot for G4.Vs.others_DA',
                               show_label=FALSE,
                               label_type = 'origin',
                               label_cex = 0.5)
gs.preload(use_spe='Homo sapiens',update=FALSE)
res1 <- funcEnrich.Fisher(input_list=ms_tab[rownames(sig_driver),'geneSymbol'],
                          bg_list=ms_tab[,'geneSymbol'],
                          use_gs=c('H','C5'),Pv_thre=0.1,Pv_adj = 'none')
analysis.par$out.dir.PLOT <- getwd() ## directory for saving the pdf files
draw.funcEnrich.cluster(funcEnrich_res=res1,top_number=30,gs_cex = 0.8,
                        gene_cex=0.9,pv_cex=0.8,
                        pdf_file = sprintf('\%s/funcEnrich_cluster.pdf',
                        analysis.par$out.dir.PLOT))
draw.funcEnrich.cluster(funcEnrich_res=res1,top_number=30,gs_cex = 1.4,
                        gene_cex=1.5,pv_cex=1.2,
                        pdf_file = sprintf('\%s/funcEnrich_clusterBOTH.pdf',
                        analysis.par$out.dir.PLOT),
                        cluster_gs=TRUE,cluster_gene = TRUE)
draw.funcEnrich.cluster(funcEnrich_res=res1,top_number=30,gs_cex = 0.8,
                        gene_cex=0.9,pv_cex=0.8,
                        pdf_file = sprintf('\%s/funcEnrich_clusterGS.pdf',
                        analysis.par$out.dir.PLOT),
                        cluster_gs=TRUE,cluster_gene = FALSE)
draw.funcEnrich.cluster(funcEnrich_res=res1,top_number=30,gs_cex = 0.8,
                        gene_cex=0.9,pv_cex=0.8,
                        pdf_file = sprintf('\%s/funcEnrich_clusterGENE.pdf',
                        analysis.par$out.dir.PLOT),
                        cluster_gs=FALSE,cluster_gene = TRUE)
draw.funcEnrich.cluster(funcEnrich_res=res1,top_number=30,gs_cex = 1.5,
                        gene_cex=1.4,pv_cex=1.2,
                        pdf_file = sprintf('\%s/funcEnrich_clusterNO.pdf',
                        analysis.par$out.dir.PLOT),
                        cluster_gs=FALSE,cluster_gene = FALSE)
}
}
