% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pipeline_functions.R
\name{combineDE}
\alias{combineDE}
\title{Combine the differential expression (DE)/differential activity (DA) results.}
\usage{
combineDE(DE_list, DE_name = NULL, transfer_tab = NULL,
  main_id = NULL, method = "Stouffer", twosided = TRUE,
  signed = TRUE)
}
\arguments{
\item{DE_list}{list of DE results.}

\item{DE_name}{a vector of DE names, if NULL, will use the names of the DE_list.
If not NULL, must match the order of DE_list.
Default is NULL.}

\item{transfer_tab}{data.frame, the transfer table for ID conversion, could be obtained by get_IDtransfer.
This transfer table is used for ID mapping for the results of DE_list.
The column names must match the DE_name.
If NULL, will treat the ID column for each DE results in DE_list as the same type of ID.
Default is NULL.}

\item{main_id}{character, the main id for specifying the ID column, must be one of the name in DE_list. If NULL, will use the first name. Default is NULL.}

\item{method}{character, choose from Stouffer or Fisher, default is "Stouffer".}

\item{twosided}{logical, whether the pvalues are from two-sided test or not.
If not, pvalues must between 0 and 0.5. Default is TRUE.}

\item{signed}{logical, whether the sign of the pvals will be considered in calculation. Default is TRUE.}
}
\value{
a list of DE/DA results, with one more component named "combine" that include the combined results.
The original DE/DA results are filtered by the used ID in combination.
}
\description{
\code{combineDE} is a function aims to combine DE/DA genes/drivers.
}
\examples{
analysis.par <- list()
analysis.par$out.dir.DATA <- system.file('demo1','driver/DATA/',package = "NetBID2")
NetBID.loadRData(analysis.par=analysis.par,step='ms-tab')
phe_info <- pData(analysis.par$cal.eset)
each_subtype <- 'G4'
G0  <- rownames(phe_info)[which(phe_info$`subgroup`!=each_subtype)] # get sample list for G0
G1  <- rownames(phe_info)[which(phe_info$`subgroup`==each_subtype)] # get sample list for G1
DE_gene_limma <- getDE.limma.2G(eset=analysis.par$cal.eset,
                               G1=G1,G0=G0,
                               G1_name=each_subtype,
                               G0_name='other')
DA_driver_limma <- getDE.limma.2G(eset=analysis.par$merge.ac.eset,
                                 G1=G1,G0=G0,
                                 G1_name=each_subtype,
                                 G0_name='other')
DE_list <- list(DE=DE_gene_limma,DA=DA_driver_limma)
g1 <- gsub('(.*)_.*','\\\\1',DE_list$DA$ID)
transfer_tab <- data.frame(DE=g1,DA=DE_list$DA$ID,stringsAsFactors = FALSE)
res1 <- combineDE(DE_list,transfer_tab=transfer_tab,main_id='DA')

\dontrun{
each_subtype <- 'G4'
G0  <- rownames(phe_info)[which(phe_info$`subgroup`!=each_subtype)] # get sample list for G0
G1  <- rownames(phe_info)[which(phe_info$`subgroup`==each_subtype)] # get sample list for G1
DE_gene_limma_G4 <- getDE.limma.2G(eset=analysis.par$cal.eset,
                                   G1=G1,G0=G0,
                                   G1_name=each_subtype,
                                   G0_name='other')
each_subtype <- 'SHH'
G0  <- rownames(phe_info)[which(phe_info$`subgroup`!=each_subtype)] # get sample list for G0
G1  <- rownames(phe_info)[which(phe_info$`subgroup`==each_subtype)] # get sample list for G1
DE_gene_limma_SHH <- getDE.limma.2G(eset=analysis.par$cal.eset,
                                    G1=G1,G0=G0,
                                    G1_name=each_subtype,
                                    G0_name='other')
DE_list <- list(G4=DE_gene_limma_G4,SHH=DE_gene_limma_SHH)
res2 <- combineDE(DE_list,transfer_tab=NULL)
}
}
