% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pipeline_functions.R
\name{update_eset.feature}
\alias{update_eset.feature}
\title{Update ExpressionSet feature information, mainly for gene ID conversion}
\usage{
update_eset.feature(use_eset = NULL, use_feature_info = NULL,
  from_feature = NULL, to_feature = NULL, merge_method = "median",
  distribute_method = "equal")
}
\arguments{
\item{use_eset}{ExpressionSet class object, the original ExpressionSet to update.}

\item{use_feature_info}{data.frame, the transfer table for ID conversion.}

\item{from_feature}{character,the column name in \code{use_feature_info},must be the same type of the rownames for the expression matrix in \code{use_eset}.}

\item{to_feature}{character, the column in \code{use_feature_info}, the target ID will be convereted to.}

\item{merge_method}{character, startegy to merge the expression value, choose from 'median','mean','max','min'. Default is "median".}

\item{distribute_method}{character, strategy to distribute the expression value, choose from 'mean', 'equal'. Default is "equal".}
}
\value{
an ExressionSet object.
}
\description{
\code{update_eset.feature} is a function to update the feature information in the ExpressionSet object.
}
\details{
This function is designed mainly for gene ID conversion.
User could input the transfer table for ID conversion, which could be obtained from the original feature table
(if use \code{load.exp.GEO} and set getGPL==TRUE) or by running the function \code{get_IDtransfer}.
The relationship betweeen the original ID and the target ID could be as follows:
1) one->one, just change the ID label.
2) multiple->one, the expression value for the target ID will be the merge of the original ID, with user-defined choice of merge_method.
3) one->mulitple, the expression value for the original ID will be distributed to the matched target IDs, with user-defined choice of distribute_method.
warning message will be presented in this condition.
4) multiple-->multiple, the function will do distribute step 3) first and merge 2).
}
\examples{
mat1 <- matrix(rnorm(10000),nrow=1000,ncol=10)
colnames(mat1) <- paste0('Sample',1:ncol(mat1))
rownames(mat1) <- paste0('Gene',1:nrow(mat1))
eset <- generate.eset(exp_mat=mat1)
test_transfer_table <- data.frame(
                       'Gene'=c('Gene1','Gene1','Gene2','Gene3','Gene4'),
                       'Transcript'=c('T11','T12','T2','T3','T3'))
new_eset <- update_eset.feature(use_eset=eset,
                                use_feature_info=test_transfer_table,
                                from_feature='Gene',
                                to_feature='Transcript',
                                merge_method='median',
                                distribute_method='equal'
                                )
print(exprs(eset)[test_transfer_table$Gene,])
print(exprs(new_eset))

}
