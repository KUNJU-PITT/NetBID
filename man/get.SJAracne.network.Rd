% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pipeline_functions.R
\name{get.SJAracne.network}
\alias{get.SJAracne.network}
\title{Generate data structure to save network information by input network file generated by SJAracne}
\usage{
get.SJAracne.network(network_file = NULL)
}
\arguments{
\item{network_file}{character, file path for the network file. Must use the file (consensus_network_ncol_.txt) in the result directory.}
}
\value{
This function will return a list containing three items, \code{network_dat}, \code{target_list} and \code{igraph_obj}.
}
\description{
\code{get.SJAracne.network} is a function to read in network file generated by SJAracne
(consensus_network_ncol_.txt file in the result directory)
}
\details{
This function aims to read in network files generated by SJAracne and save the network information into three lists,
\code{network_dat} is a data.frame to save all the information in the network file;
\code{target_list} is a list containing the target genes' information for the drivers. The names for the list is the driver name
and each object in the list is a data.frame to save the target genes.
\code{igraph_obj} is an igraph object to save the network, it is a directed, weighted network.
The function will set two edge attributes to the igraph_obj, \code{weight} is the MI values and \code{sign} is the sign for the spearman value
to indicate positive regulation (1) or negative regulation (-1).
}
\examples{
if(exists('analysis.par')==TRUE) rm(analysis.par)
network.dir <- sprintf('\%s/demo1/network/',system.file(package = "NetBID2")) # use demo
network.project.name <- 'project_2019-02-14' # demo project name
project_main_dir <- 'test/'
project_name <- 'test_driver'
analysis.par  <- NetBID.analysis.dir.create(project_main_dir=project_main_dir,
                                            prject_name=project_name,
                                            network_dir=network.dir,
                                            network_project_name=network.project.name)
analysis.par$tf.network  <- get.SJAracne.network(network_file=analysis.par$tf.network.file)
analysis.par$sig.network <- get.SJAracne.network(network_file=analysis.par$sig.network.file)

\dontrun{
}
}
