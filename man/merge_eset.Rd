% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pipeline_functions.R
\name{merge_eset}
\alias{merge_eset}
\title{Merge two ExpressionSet class object.}
\usage{
merge_eset(eset1, eset2, group1 = NULL, group2 = NULL,
  group_col_name = "original_group", use_col = NULL,
  remove_batch = FALSE)
}
\arguments{
\item{eset1}{ExpressionSet class, the first dataset to merge.}

\item{eset2}{ExpressionSet class, the second dataset to merge.}

\item{group1}{character, name for the first group.}

\item{group2}{character, name for the second group.}

\item{group_col_name, }{character, name for the column indicate the originate of the samples in the phenotype information dataframe in the merged ExpressionSet.
Default is 'original_group'.}

\item{use_col}{a vector of characters, the column names in the phenotype information to be kept in the merged ExpressionSet.
If NULL, will use the intersected column names between the two datasets. Default is NULL.}

\item{remove_batch}{logical, indicate whether or not to remove batch effect between two sample set.
Default is FALSE.}
}
\value{
an ExressionSet object.
}
\description{
\code{merge_eset} is a function to merge two ExpressionSet class objects.
If the genes in two objects are same, the expression matrix will be directly merged, otherwise,
Z-transformation is performed before merging.
}
\examples{
mat1 <- matrix(rnorm(10000),nrow=1000,ncol=10)
colnames(mat1) <- paste0('Sample1_',1:ncol(mat1))
rownames(mat1) <- paste0('Gene',1:nrow(mat1))
eset1 <- generate.eset(exp_mat=mat1)
mat2 <- matrix(rnorm(10000),nrow=1000,ncol=10)
colnames(mat2) <- paste0('Sample2_',1:ncol(mat1))
rownames(mat2) <- paste0('Gene',1:nrow(mat1))
eset2 <- generate.eset(exp_mat=mat2)
new_eset <- merge_eset(eset1,eset2)
}
